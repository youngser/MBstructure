geom_point(aes(colour=neuron, shape=cluster), na.rm = TRUE, alpha=1,size=3) +
#  scale_shape_manual(values=1:nlevels(mydf3$cluster)) +
scale_shape_manual(values=as.character(1:mc$G)) +
stat_density(aes(x = x, y = ..scaled.. * diff(range(x)) + min(x)),
data = gg3$densities, position = "identity",
colour = "grey20", geom = "line") +
theme(axis.title=element_text(size=0)) +
theme(axis.text.x=element_text(size=0)) +
theme(axis.ticks = element_line(size = 0)) +
theme(axis.text.y=element_text(size=0)) +
theme(strip.text=element_text(size=rel(1.2))) +
theme(legend.title = element_text(colour="black", size=14, face="bold")) +
theme(legend.text = element_text(colour="black", size = 12, face = "plain"))
print(p)
kable(table(type=vdf$type,Khat6=mc$class))
mydf4 <- subset(df3,select=c("out 1","out 2"))
mydf4 <- subset(mydf3,select=c("out 1","out 2"))
str(df3)
str(mydf3)
mydf4 <- subset(mydf3,select=c("X1","X2"))
mydf4$neuron <- vdf$type
mydf4$cluster <- factor(lab3)
mydf4 <- subset(mydf4, neuron=="KC")
mydf4$claw <- vdf$claw[!is.na(vdf$claw)]
p <- ggplot(mydf4, aes_string(x="`out 1`",y="`out 2`")) +
geom_point(aes(color=cluster,size=claw),alpha=.7) +
scale_shape_manual(values=1:nlevels(mydf4$cluster))
mycols <- gg_color_hue(4)
p2 <- p + geom_point(data=subset(mydf4, cluster==5), color=mycols[4],alpha=.7)
print(p2)
p <- ggplot(mydf4, aes_string(x="`X1`",y="`X2`")) +
geom_point(aes(color=cluster,size=claw),alpha=.7) +
scale_shape_manual(values=1:nlevels(mydf4$cluster)) +
xlab("out 1") + ylab("out 2")
mycols <- gg_color_hue(4)
p2 <- p + geom_point(data=subset(mydf4, cluster==5), color=mycols[4],alpha=.7)
print(p2)
library(mbstructure)
str(KC.info)
claws
claw
str(claw)
str(vdf)
head(vdf)
KC.info2 <- vdf[vdf$type=="KC",]
KC.info2$claw <- factor(KC.info2$claw,
levels = c('1','2','3','4','5','6','0'),ordered = TRUE)
m <- ggplot(KC.info2, aes(factor(claw),dist,color=factor(claw),fill=factor(claw)))
m + geom_boxplot(notch=FALSE,alpha=0.5) + geom_jitter(width = 0.2) +
guides(fill=FALSE,color=FALSE) + xlab("number of claws") + ylab("distance to neuropile in nm")
library(mbstructure)
table(vdf$class)
table(mc$classification)
vdf$cluster <- mc$class
library(mbstructure)
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
tmpcol <- gg_color_hue(2)
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred")
method <- "linear"
K <- 100
Xhat4 <- Xhat[vdf$type=="KC",]
out <- semiparYQ(Xhat4, K=K, method=method, doplot=FALSE, verbose=FALSE)
means <- out$means
vars <- t(sapply(1:dim(out$vars)[3],function(x) sqrt(diag(out$vars[,,x]))))
K <- nrow(means)
Xhat5 <- rbind(Xhat4,means)
colnames(Xhat5) <- c(paste("out",1:3),paste("in",1:3))
ggY <- makePairs(as.data.frame(Xhat5))
ndf <- nrow(ggY$all)
mydf.yq <- data.frame(ggY$all, type=rep(c(rep("KC",nrow(Xhat4)),rep("MLE",nrow(means))),length=ndf))
alpha <- 0.7
tmpcol <- gg_color_hue(2,alpha=alpha)
p <- ggplot(mydf.yq, aes_string(x = "x", y = "y")) +
facet_grid(xvar ~ yvar, scales = "free") +
geom_point(aes(colour=type), na.rm = TRUE, alpha=alpha,size=1) +
scale_colour_manual(values=c(tmpcol[1],"darkred")) +
#  scale_shape_manual(values=1:nlevels(mydf3$cluster)) +
#  scale_shape_manual(values=as.character(1:mc3$G)) +
stat_density(aes(x = x, y = ..scaled.. * diff(range(x)) + min(x)),
data = ggY$densities, position = "identity",
colour = "grey20", geom = "line") +
theme(axis.title=element_text(size=0)) +
theme(axis.text.x=element_text(size=0)) +
theme(axis.ticks = element_line(size = 0)) +
theme(axis.text.y=element_text(size=0)) +
theme(strip.text=element_text(size=rel(1.2))) +
theme(legend.title = element_text(colour="black", size=14, face="bold")) +
theme(legend.text = element_text(colour="black", size = 12, face = "plain"))
print(p)
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
tmpcol <- gg_color_hue(2)
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred")
#p3 + xlab("out 1") + ylab("out 2")
#save(dd,dd3,dd4,tmpcol,Khat,file="~/Dropbox/Worm/Codes/Connectome/mle2-right.Rbin")
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
#    geom_polygon(data=cir, aes(x, y, group=id), fill="lightpink", colour="lightpink", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) + coord_equal()
#    geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred")
p3 + xlab("out 1") + ylab("out 2")
str(dd)
vdf$cluster <- factor(mc$class)
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
str(dd)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
tmpcol <- gg_color_hue(2)
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred")
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
#    geom_polygon(data=cir, aes(x, y, group=id), fill="lightpink", colour="lightpink", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) + coord_equal()
#    geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred")
p3 + xlab("out 1") + ylab("out 2")
Khat <- max(dd$cluster)
str(dd)
Khat <- max(as.numeric(dd$cluster))
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
tmpcol <- gg_color_hue(2)
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred")
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
#    geom_polygon(data=cir, aes(x, y, group=id), fill="lightpink", colour="lightpink", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) + coord_equal()
#    geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred")
p3 + xlab("out 1") + ylab("out 2")
KC.info2 <- vdf[vdf$type=="KC",]
KC.info2$claw <- factor(KC.info2$claw,
levels = c('1','2','3','4','5','6','0'),ordered = TRUE)
m <- ggplot(KC.info2, aes(factor(claw),dist,color=factor(claw),fill=factor(claw)))
m <- m + geom_boxplot(notch=FALSE,alpha=0.5) + geom_jitter(width = 0.2) +
guides(fill=FALSE,color=FALSE) + xlab("number of claws") + ylab("distance to neuropile in nm")
print(m)
mean1 <- out$mean1
mean2 <- out$mean2
mean3 <- out$mean3
t_proj_ls=rep(NA,n)
proj_ls=matrix(NA,n,p)
for (i in 1:n)
{
t_ls=seq(-0.2,1.2,0.0001)
dist_ls=rep(NA,length(t_ls))
for (i_t in 1:length(t_ls))
{
t=t_ls[i_t]
this_mean=(1-t)^2*mean1+2*(1-t)*t*mean3+t^2*mean2
dist_ls[i_t]=sum((this_mean-Xhat4[i,])^2)
}
proj_t=t_ls[which(dist_ls==min(dist_ls))[1]]
t_proj_ls[i]=proj_t
proj_ls[i,]=(1-proj_t)^2*mean1+2*(1-proj_t)*proj_t*mean3+proj_t^2*mean2
}
t_proj_ls
Xhat_dist=all.df$dist[idx]
Xhat5 <- rbind(Xhat4[,1:2],proj_ls[,1:2])
df <- data.frame(x=Xhat5[,1],y=Xhat5[,2],idx=rep(1:nrow(Xhat4),times=2),type=rep(c("KC","ti"),each=nrow(Xhat4)))
p2 <- ggplot(df, aes(x,y,group=idx,color=type)) + geom_point(size=2) + geom_line(color="red",linetype=3) + xlab("out 1") + ylab("out 2") +
scale_colour_manual(values=c(tmpcol[1],"darkred"),labels=c("KC",expression(t[i])))
print(p2)
n
p
n <- nrow(Xhat4)
p <- ncol(Xhat4)
mean1 <- out$mean1
mean2 <- out$mean2
mean3 <- out$mean3
t_proj_ls=rep(NA,n)
proj_ls=matrix(NA,n,p)
for (i in 1:n)
{
t_ls=seq(-0.2,1.2,0.0001)
dist_ls=rep(NA,length(t_ls))
for (i_t in 1:length(t_ls))
{
t=t_ls[i_t]
this_mean=(1-t)^2*mean1+2*(1-t)*t*mean3+t^2*mean2
dist_ls[i_t]=sum((this_mean-Xhat4[i,])^2)
}
proj_t=t_ls[which(dist_ls==min(dist_ls))[1]]
t_proj_ls[i]=proj_t
proj_ls[i,]=(1-proj_t)^2*mean1+2*(1-proj_t)*proj_t*mean3+proj_t^2*mean2
}
t_proj_ls
Xhat_dist=all.df$dist[idx]
Xhat5 <- rbind(Xhat4[,1:2],proj_ls[,1:2])
df <- data.frame(x=Xhat5[,1],y=Xhat5[,2],idx=rep(1:nrow(Xhat4),times=2),type=rep(c("KC","ti"),each=nrow(Xhat4)))
p2 <- ggplot(df, aes(x,y,group=idx,color=type)) + geom_point(size=2) + geom_line(color="red",linetype=3) + xlab("out 1") + ylab("out 2") +
scale_colour_manual(values=c(tmpcol[1],"darkred"),labels=c("KC",expression(t[i])))
print(p2)
Xhat_dist <- vdf$dist[idx]
Xhat_dist <- vdf$dist[vdf$type=="KC"]
Xhat5 <- rbind(Xhat4[,1:2],proj_ls[,1:2])
df <- data.frame(x=Xhat5[,1],y=Xhat5[,2],idx=rep(1:nrow(Xhat4),times=2),type=rep(c("KC","ti"),each=nrow(Xhat4)))
p2 <- ggplot(df, aes(x,y,group=idx,color=type)) + geom_point(size=2) + geom_line(color="red",linetype=3) + xlab("out 1") + ylab("out 2") +
scale_colour_manual(values=c(tmpcol[1],"darkred"),labels=c("KC",expression(t[i])))
print(p2)
df <- data.frame(x=t_proj_ls,y=Xhat_dist,claw=vdf$claw[vdf$type=="KC"])
p3 <- ggplot(df, aes(x, y)) +  geom_point(aes(size=claw),color=tmpcol[1],alpha=.5) +
geom_smooth(method = "lm", se = TRUE) +
xlab(expression(t[i])) + ylab(expression(delta[i]))
print(p3)
library(mbstructure)
vdf$claw[vdf$type=="KC"]
str(t_proj_ls)
library(mbstructure)
str(Xhat)
str(vdf)
method <- "linear"
K <- 8 #100
Xhat4 <- Xhat[vdf$type=="KC",]
n <- nrow(Xhat4)
p <- ncol(Xhat4)
out <- semiparYQ(Xhat4, K=K, method=method, doplot=FALSE, verbose=FALSE)
mean1 <- out$mean1
mean2 <- out$mean2
mean3 <- out$mean3
t_proj_ls <- rep(NA,n)
proj_ls <- matrix(NA,n,p)
for (i in 1:n)
{
t_ls <- seq(-0.2,1.2,0.0001)
dist_ls=rep(NA,length(t_ls))
for (i_t in 1:length(t_ls))
{
t <- t_ls[i_t]
this_mean <-(1-t)^2*mean1+2*(1-t)*t*mean3+t^2*mean2
dist_ls[i_t] <- sum((this_mean-Xhat4[i,])^2)
}
proj_t <- t_ls[which(dist_ls==min(dist_ls))[1]]
t_proj_ls[i] <- proj_t
proj_ls[i,] <- (1-proj_t)^2*mean1+2*(1-proj_t)*proj_t*mean3+proj_t^2*mean2
}
Xhat_dist <- vdf$dist[vdf$type=="KC"]
Xhat5 <- rbind(Xhat4[,1:2],proj_ls[,1:2])
df <- data.frame(x=Xhat5[,1],y=Xhat5[,2],idx=rep(1:nrow(Xhat4),times=2),type=rep(c("KC","ti"),each=nrow(Xhat4)))
p5 <- ggplot(df, aes(x,y,group=idx,color=type)) + geom_point(size=2) + geom_line(color="red",linetype=3) + xlab("out 1") + ylab("out 2") +
scale_colour_manual(values=c(tmpcol[1],"darkred"),labels=c("KC",expression(t[i])))
print(p5)
# Figure 12
df <- data.frame(x=t_proj_ls,y=Xhat_dist,claw=vdf$claw[vdf$type=="KC"])
p6 <- ggplot(df, aes(x, y)) +  geom_point(aes(size=claw),color=tmpcol[1],alpha=.5) +
geom_smooth(method = "lm", se = TRUE) +
xlab(expression(t[i])) + ylab(expression(delta[i]))
print(p6)
str(t_proj_ls)
str(out)
library(mbstructure)
dim(g[])
g[][1:5,1:5]
sum(g[]>1)
library(mbstructure)
data(MBconnectome)
library(mbstructure)
data(MBconnectome)
str(newrdat)
library(mbstructure)
data(MBconnectome)
suppressMessages(library(mclust))
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow = FALSE)
Kmax <- 19
mc <- Mclust(Xhat, 2:Kmax)
vdf$cluster <- factor(mc$class)
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=6, dtype="synth", doplot=FALSE)
suppressMessages(library(mvtnorm))
suppressMessages(library(ggplot2))
suppressMessages(library(RColorBrewer))
KC <- vdf$type=="KC"
sout4 <- synthMB(g, Xhat, vdf, labK=vdf$type, Khat=4, dtype="real", doplot=FALSE)
ase4 <- sout4$ase$X[KC,]
aseBobs4 <- sout4$aseBobs$X[KC,]
ase6 <- ase4 #$X[KC,]
aseBobs6 <- sout6$aseBobsnew[KC,] # procrusted
plot(ase4)
str(aseBobs4)
points(aseBobs4,col=2)
plot(ase4)
points(aseBobs6,col=2)
library(mbstructure)
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=6, dtype="synth", doplot=FALSE)
ase6 <- ase4 #$X[KC,]
aseBobs6 <- sout6$aseBobsnew[KC,] # procrusted
plot(ase4)
points(aseBobs6,col=2)
points(-aseBobs6[,1],aseBobs[,2],col=2)
points(-aseBobs6[,1],aseBobs6[,2],col=2)
plot(ase4)
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=6, dtype="synth", doplot=FALSE)
plot(ase4)
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
data(MBconnectome)
suppressMessages(library(mclust))
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow = FALSE)
Kmax <- 19
mc <- Mclust(Xhat, 2:Kmax)
vdf$cluster <- factor(mc$class)
KC <- vdf$type=="KC"
sout4 <- synthMB(g, Xhat, vdf, labK=vdf$type, Khat=4, dtype="real", doplot=FALSE)
ase4 <- sout4$ase$X[KC,]
aseBobs4 <- sout4$aseBobs$X[KC,]
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=6, dtype="synth", doplot=FALSE)
Khat <- max(vdf$cluster)
Khat <- max(as.numeric(vdf$cluster))
Khat <- length(table(vdf$type))
Khat <- max(as.numeric(vdf$cluster))
ase6 <- ase4 #$X[KC,]
aseBobs6 <- sout6$aseBobsnew[KC,] # procrusted
plot(ase6$X)
plot(ase6)
plot(-ase6[,1],ase6[,2])
points(aseBobs,col=2)
points(aseBobs6,col=2)
plot(-ase6[,1],ase6[,2])
points(aseBobs6,col=2)
points(aseBobs6[,1],-aseBobs[,2],col=2)
points(aseBobs6[,1],-aseBobs6[,2],col=2)
plot(-ase6[,1],ase6[,2])
points(aseBobs6[,1],-aseBobs6[,2],col=2)
KC
Khat
table(labK)
labK = vdf$cluster
table(labK)
tab <- table(labK)
Bobsvec <- matrix(0,Khat,Khat);
for (i in 1:Khat) for(j in 1:Khat) { Bobsvec[i,j] <- mean(as.matrix(g[])[labK==i,labK==j]) }
Bobsvec
Bobs <- matrix(Bobsvec,ncol=Khat,byrow=T)
round(Bobs,2)
Bobs <- matrix(Bobsvec,ncol=Khat,byrow=F)
round(Bobs,2)
svdBobs <- svd(Bobs) # true latent positions for SBM on Bobs
Bobsout <- svdBobs$u %*% diag(svdBobs$d^(1/2))
Bobsin  <- diag(svdBobs$d^(1/2)) %*% t(svdBobs$v)
library(mbstructure)
Khat <- max(as.numeric(vdf$cluster))
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=Khat, dtype="synth", doplot=FALSE)
aseBobs6 <- sout6$aseBobsnew[KC,] # procrusted
plot(-ase6[,1],ase6[,2])
points(aseBobs6[,1],-aseBobs6[,2],col=2)
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=Khat, dtype="synth", doplot=FALSE)
plot(-ase6[,1],ase6[,2])
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
kable(table(type=vdf$type,Khat6=vdf$cluster),caption="Graph embedding inference mclust ◦ ase for the Drosophila connectome yields six clusters, clearly coherent with but not perfectly aligned with the four true neuron types, as presented in this confusion matrix.")
require(knitr)
kable(table(type=vdf$type,Khat6=vdf$cluster),caption="Graph embedding inference mclust ◦ ase for the Drosophila connectome yields six clusters, clearly coherent with but not perfectly aligned with the four true neuron types, as presented in this confusion matrix.")
library(mbstructure)
library(printr)
?printr
library(mbstructure)
data(MBstructure)
data(MBconnectome)
data(claw)
str(claw)
str(newrdat)
str(claw)
str(vdf.right)
sessionInfo()
library(mbstructure)
data(MBconnectome)
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow=FALSE)
suppressMessages(library(mclust))
Kmax <- 19
mc <- Mclust(Xhat, 1:Kmax)
vdf$cluster <- factor(mc$class)
sout <- synthMB(g, vdf)
synthMB
library(mbstructure)
data(MBconnectome)
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow=FALSE)
suppressMessages(library(mclust))
Kmax <- 19
mc <- Mclust(Xhat, 1:Kmax)
vdf$cluster <- factor(mc$class)
str(Xhat)
str(vdf)
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
Khat <- max(as.numeric(dd$cluster))
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
K <- 100
Xhat4 <- Xhat[vdf$type=="KC",]
n <- nrow(Xhat4)
p <- ncol(Xhat4)
out100 <- semiparYQ(Xhat4, K=K, verbose=FALSE)
means <- out100$means
vars <- t(sapply(1:dim(out100$vars)[3],function(x) sqrt(diag(out100$vars[,,x]))))
K <- nrow(means)
Xhat5 <- rbind(Xhat4,means)
colnames(Xhat5) <- c(paste("out",1:3),paste("in",1:3))
ggY <- makePairs(as.data.frame(Xhat5))
ndf <- nrow(ggY$all)
mydf.yq <- data.frame(ggY$all, type=rep(c(rep("KC",nrow(Xhat4)),rep("MLE",nrow(means))),length=ndf))
alpha <- 0.7
tmpcol <- gg_color_hue(2,alpha=alpha)
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
Khat <- max(as.numeric(dd$cluster))
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
tmpcol <- gg_color_hue(2)
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
suppressMessages(library(mvtnorm))
suppressMessages(library(ggplot2))
suppressMessages(library(RColorBrewer))
suppressMessages(library(packcircles))
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) + coord_equal() +
xlab("out 1") + ylab("out 2")
print(p3)
type <- names(table(dd$type))[-1]
means2 <- t(sapply(type, function(x) colMeans(dd[dd$type2==x,1:2])))
means2 <- data.frame(x=means2[,1],y=means2[,2],col=factor(type))
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) + coord_equal() +
geom_point(data=means2, aes(x=x,y=y,color=col),size=5,show.legend=FALSE) +
xlab("out 1") + ylab("out 2")
print(p3)
library(mbstructure)
