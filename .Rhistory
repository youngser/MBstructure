t_proj_ls=rep(NA,n)
proj_ls=matrix(NA,n,p)
for (i in 1:n)
{
t_ls=seq(-0.2,1.2,0.0001)
dist_ls=rep(NA,length(t_ls))
for (i_t in 1:length(t_ls))
{
t=t_ls[i_t]
this_mean=(1-t)^2*mean1+2*(1-t)*t*mean3+t^2*mean2
dist_ls[i_t]=sum((this_mean-Xhat4[i,])^2)
}
proj_t=t_ls[which(dist_ls==min(dist_ls))[1]]
t_proj_ls[i]=proj_t
proj_ls[i,]=(1-proj_t)^2*mean1+2*(1-proj_t)*proj_t*mean3+proj_t^2*mean2
}
t_proj_ls
Xhat_dist=all.df$dist[idx]
Xhat5 <- rbind(Xhat4[,1:2],proj_ls[,1:2])
df <- data.frame(x=Xhat5[,1],y=Xhat5[,2],idx=rep(1:nrow(Xhat4),times=2),type=rep(c("KC","ti"),each=nrow(Xhat4)))
p2 <- ggplot(df, aes(x,y,group=idx,color=type)) + geom_point(size=2) + geom_line(color="red",linetype=3) + xlab("out 1") + ylab("out 2") +
scale_colour_manual(values=c(tmpcol[1],"darkred"),labels=c("KC",expression(t[i])))
print(p2)
n
p
n <- nrow(Xhat4)
p <- ncol(Xhat4)
mean1 <- out$mean1
mean2 <- out$mean2
mean3 <- out$mean3
t_proj_ls=rep(NA,n)
proj_ls=matrix(NA,n,p)
for (i in 1:n)
{
t_ls=seq(-0.2,1.2,0.0001)
dist_ls=rep(NA,length(t_ls))
for (i_t in 1:length(t_ls))
{
t=t_ls[i_t]
this_mean=(1-t)^2*mean1+2*(1-t)*t*mean3+t^2*mean2
dist_ls[i_t]=sum((this_mean-Xhat4[i,])^2)
}
proj_t=t_ls[which(dist_ls==min(dist_ls))[1]]
t_proj_ls[i]=proj_t
proj_ls[i,]=(1-proj_t)^2*mean1+2*(1-proj_t)*proj_t*mean3+proj_t^2*mean2
}
t_proj_ls
Xhat_dist=all.df$dist[idx]
Xhat5 <- rbind(Xhat4[,1:2],proj_ls[,1:2])
df <- data.frame(x=Xhat5[,1],y=Xhat5[,2],idx=rep(1:nrow(Xhat4),times=2),type=rep(c("KC","ti"),each=nrow(Xhat4)))
p2 <- ggplot(df, aes(x,y,group=idx,color=type)) + geom_point(size=2) + geom_line(color="red",linetype=3) + xlab("out 1") + ylab("out 2") +
scale_colour_manual(values=c(tmpcol[1],"darkred"),labels=c("KC",expression(t[i])))
print(p2)
Xhat_dist <- vdf$dist[idx]
Xhat_dist <- vdf$dist[vdf$type=="KC"]
Xhat5 <- rbind(Xhat4[,1:2],proj_ls[,1:2])
df <- data.frame(x=Xhat5[,1],y=Xhat5[,2],idx=rep(1:nrow(Xhat4),times=2),type=rep(c("KC","ti"),each=nrow(Xhat4)))
p2 <- ggplot(df, aes(x,y,group=idx,color=type)) + geom_point(size=2) + geom_line(color="red",linetype=3) + xlab("out 1") + ylab("out 2") +
scale_colour_manual(values=c(tmpcol[1],"darkred"),labels=c("KC",expression(t[i])))
print(p2)
df <- data.frame(x=t_proj_ls,y=Xhat_dist,claw=vdf$claw[vdf$type=="KC"])
p3 <- ggplot(df, aes(x, y)) +  geom_point(aes(size=claw),color=tmpcol[1],alpha=.5) +
geom_smooth(method = "lm", se = TRUE) +
xlab(expression(t[i])) + ylab(expression(delta[i]))
print(p3)
library(mbstructure)
vdf$claw[vdf$type=="KC"]
str(t_proj_ls)
library(mbstructure)
str(Xhat)
str(vdf)
method <- "linear"
K <- 8 #100
Xhat4 <- Xhat[vdf$type=="KC",]
n <- nrow(Xhat4)
p <- ncol(Xhat4)
out <- semiparYQ(Xhat4, K=K, method=method, doplot=FALSE, verbose=FALSE)
mean1 <- out$mean1
mean2 <- out$mean2
mean3 <- out$mean3
t_proj_ls <- rep(NA,n)
proj_ls <- matrix(NA,n,p)
for (i in 1:n)
{
t_ls <- seq(-0.2,1.2,0.0001)
dist_ls=rep(NA,length(t_ls))
for (i_t in 1:length(t_ls))
{
t <- t_ls[i_t]
this_mean <-(1-t)^2*mean1+2*(1-t)*t*mean3+t^2*mean2
dist_ls[i_t] <- sum((this_mean-Xhat4[i,])^2)
}
proj_t <- t_ls[which(dist_ls==min(dist_ls))[1]]
t_proj_ls[i] <- proj_t
proj_ls[i,] <- (1-proj_t)^2*mean1+2*(1-proj_t)*proj_t*mean3+proj_t^2*mean2
}
Xhat_dist <- vdf$dist[vdf$type=="KC"]
Xhat5 <- rbind(Xhat4[,1:2],proj_ls[,1:2])
df <- data.frame(x=Xhat5[,1],y=Xhat5[,2],idx=rep(1:nrow(Xhat4),times=2),type=rep(c("KC","ti"),each=nrow(Xhat4)))
p5 <- ggplot(df, aes(x,y,group=idx,color=type)) + geom_point(size=2) + geom_line(color="red",linetype=3) + xlab("out 1") + ylab("out 2") +
scale_colour_manual(values=c(tmpcol[1],"darkred"),labels=c("KC",expression(t[i])))
print(p5)
# Figure 12
df <- data.frame(x=t_proj_ls,y=Xhat_dist,claw=vdf$claw[vdf$type=="KC"])
p6 <- ggplot(df, aes(x, y)) +  geom_point(aes(size=claw),color=tmpcol[1],alpha=.5) +
geom_smooth(method = "lm", se = TRUE) +
xlab(expression(t[i])) + ylab(expression(delta[i]))
print(p6)
str(t_proj_ls)
str(out)
library(mbstructure)
dim(g[])
g[][1:5,1:5]
sum(g[]>1)
library(mbstructure)
data(MBconnectome)
library(mbstructure)
data(MBconnectome)
str(newrdat)
library(mbstructure)
data(MBconnectome)
suppressMessages(library(mclust))
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow = FALSE)
Kmax <- 19
mc <- Mclust(Xhat, 2:Kmax)
vdf$cluster <- factor(mc$class)
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=6, dtype="synth", doplot=FALSE)
suppressMessages(library(mvtnorm))
suppressMessages(library(ggplot2))
suppressMessages(library(RColorBrewer))
KC <- vdf$type=="KC"
sout4 <- synthMB(g, Xhat, vdf, labK=vdf$type, Khat=4, dtype="real", doplot=FALSE)
ase4 <- sout4$ase$X[KC,]
aseBobs4 <- sout4$aseBobs$X[KC,]
ase6 <- ase4 #$X[KC,]
aseBobs6 <- sout6$aseBobsnew[KC,] # procrusted
plot(ase4)
str(aseBobs4)
points(aseBobs4,col=2)
plot(ase4)
points(aseBobs6,col=2)
library(mbstructure)
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=6, dtype="synth", doplot=FALSE)
ase6 <- ase4 #$X[KC,]
aseBobs6 <- sout6$aseBobsnew[KC,] # procrusted
plot(ase4)
points(aseBobs6,col=2)
points(-aseBobs6[,1],aseBobs[,2],col=2)
points(-aseBobs6[,1],aseBobs6[,2],col=2)
plot(ase4)
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=6, dtype="synth", doplot=FALSE)
plot(ase4)
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
data(MBconnectome)
suppressMessages(library(mclust))
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow = FALSE)
Kmax <- 19
mc <- Mclust(Xhat, 2:Kmax)
vdf$cluster <- factor(mc$class)
KC <- vdf$type=="KC"
sout4 <- synthMB(g, Xhat, vdf, labK=vdf$type, Khat=4, dtype="real", doplot=FALSE)
ase4 <- sout4$ase$X[KC,]
aseBobs4 <- sout4$aseBobs$X[KC,]
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=6, dtype="synth", doplot=FALSE)
Khat <- max(vdf$cluster)
Khat <- max(as.numeric(vdf$cluster))
Khat <- length(table(vdf$type))
Khat <- max(as.numeric(vdf$cluster))
ase6 <- ase4 #$X[KC,]
aseBobs6 <- sout6$aseBobsnew[KC,] # procrusted
plot(ase6$X)
plot(ase6)
plot(-ase6[,1],ase6[,2])
points(aseBobs,col=2)
points(aseBobs6,col=2)
plot(-ase6[,1],ase6[,2])
points(aseBobs6,col=2)
points(aseBobs6[,1],-aseBobs[,2],col=2)
points(aseBobs6[,1],-aseBobs6[,2],col=2)
plot(-ase6[,1],ase6[,2])
points(aseBobs6[,1],-aseBobs6[,2],col=2)
KC
Khat
table(labK)
labK = vdf$cluster
table(labK)
tab <- table(labK)
Bobsvec <- matrix(0,Khat,Khat);
for (i in 1:Khat) for(j in 1:Khat) { Bobsvec[i,j] <- mean(as.matrix(g[])[labK==i,labK==j]) }
Bobsvec
Bobs <- matrix(Bobsvec,ncol=Khat,byrow=T)
round(Bobs,2)
Bobs <- matrix(Bobsvec,ncol=Khat,byrow=F)
round(Bobs,2)
svdBobs <- svd(Bobs) # true latent positions for SBM on Bobs
Bobsout <- svdBobs$u %*% diag(svdBobs$d^(1/2))
Bobsin  <- diag(svdBobs$d^(1/2)) %*% t(svdBobs$v)
library(mbstructure)
Khat <- max(as.numeric(vdf$cluster))
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=Khat, dtype="synth", doplot=FALSE)
aseBobs6 <- sout6$aseBobsnew[KC,] # procrusted
plot(-ase6[,1],ase6[,2])
points(aseBobs6[,1],-aseBobs6[,2],col=2)
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=Khat, dtype="synth", doplot=FALSE)
plot(-ase6[,1],ase6[,2])
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
kable(table(type=vdf$type,Khat6=vdf$cluster),caption="Graph embedding inference mclust ◦ ase for the Drosophila connectome yields six clusters, clearly coherent with but not perfectly aligned with the four true neuron types, as presented in this confusion matrix.")
require(knitr)
kable(table(type=vdf$type,Khat6=vdf$cluster),caption="Graph embedding inference mclust ◦ ase for the Drosophila connectome yields six clusters, clearly coherent with but not perfectly aligned with the four true neuron types, as presented in this confusion matrix.")
library(mbstructure)
library(printr)
?printr
library(mbstructure)
data(MBstructure)
data(MBconnectome)
data(claw)
str(claw)
str(newrdat)
str(claw)
str(vdf.right)
sessionInfo()
library(mbstructure)
data(MBconnectome)
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow=FALSE)
suppressMessages(library(mclust))
Kmax <- 19
mc <- Mclust(Xhat, 1:Kmax)
vdf$cluster <- factor(mc$class)
sout <- synthMB(g, vdf)
synthMB
library(mbstructure)
data(MBconnectome)
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow=FALSE)
suppressMessages(library(mclust))
Kmax <- 19
mc <- Mclust(Xhat, 1:Kmax)
vdf$cluster <- factor(mc$class)
str(Xhat)
str(vdf)
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
Khat <- max(as.numeric(dd$cluster))
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
K <- 100
Xhat4 <- Xhat[vdf$type=="KC",]
n <- nrow(Xhat4)
p <- ncol(Xhat4)
out100 <- semiparYQ(Xhat4, K=K, verbose=FALSE)
means <- out100$means
vars <- t(sapply(1:dim(out100$vars)[3],function(x) sqrt(diag(out100$vars[,,x]))))
K <- nrow(means)
Xhat5 <- rbind(Xhat4,means)
colnames(Xhat5) <- c(paste("out",1:3),paste("in",1:3))
ggY <- makePairs(as.data.frame(Xhat5))
ndf <- nrow(ggY$all)
mydf.yq <- data.frame(ggY$all, type=rep(c(rep("KC",nrow(Xhat4)),rep("MLE",nrow(means))),length=ndf))
alpha <- 0.7
tmpcol <- gg_color_hue(2,alpha=alpha)
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
Khat <- max(as.numeric(dd$cluster))
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
tmpcol <- gg_color_hue(2)
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
suppressMessages(library(mvtnorm))
suppressMessages(library(ggplot2))
suppressMessages(library(RColorBrewer))
suppressMessages(library(packcircles))
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) + coord_equal() +
xlab("out 1") + ylab("out 2")
print(p3)
type <- names(table(dd$type))[-1]
means2 <- t(sapply(type, function(x) colMeans(dd[dd$type2==x,1:2])))
means2 <- data.frame(x=means2[,1],y=means2[,2],col=factor(type))
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) + coord_equal() +
geom_point(data=means2, aes(x=x,y=y,color=col),size=5,show.legend=FALSE) +
xlab("out 1") + ylab("out 2")
print(p3)
library(mbstructure)
data(MBconnectome)
suppressMessages(library(mclust))
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow = FALSE)
Kmax <- 19
mc <- Mclust(Xhat, 2:Kmax)
vdf$cluster <- factor(mc$class)
Xhat4 <- Xhat[vdf$type=="KC",]
out100 <- semiparYQ(Xhat4, K=100, verbose=FALSE)
suppressMessages(library(ggplot2))
suppressMessages(library(mclust))
suppressMessages(library(RColorBrewer))
suppressMessages(library(packcircles))
suppressMessages(library(mvtnorm))
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
#    dd <- dd[,c("x","y","cluster","type","age")]
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
Khat <- max(as.numeric(dd$cluster))
dd3 <- subset(dd, type2!="KC")    # ellipse
vars <- t(sapply(1:dim(out100$vars)[3],function(x) sqrt(diag(out100$vars[,,x]))))
dd4 <- data.frame(x=out100$means[,1],y=out100$means[,2],sdx=vars[,1],sdy=vars[,2])
## model: right
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_point(aes(color=type,shape=type,fill=type),size=0,alpha=0.9) +
scale_shape_manual(values=rep("R",4),guide=FALSE) +
stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2), alpha=.2, show.legend=FALSE) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred") +
xlab("out 1") + ylab("out 2")
## point: left
out.left <- generate.graph(newldat, vdf.left)
g.left <- out.left$g
vdf.left <- out.left$vdf
Xhat.left <- doEmbed(g.left, dmax)
mc.left <- Mclust(Xhat.left, 2:10)
mytab.left <- table(vdf.left$type,mc.left$class)
type2.left <- factor(rownames(mytab.left)[apply(mytab.left,2,which.max)])
type2.left <- type2.left[mc.left$class]
dd.left <- data.frame(x=-Xhat.left[,1],y=Xhat.left[,2],type=vdf.left$type, type2=type2.left)
p4 <- p3 + geom_point(data=dd.left, aes(x=x,y=y,color=type),alpha=0.7)
dd.right <- dd[,c("x","y","type","type2")]
dd.right$side <- "right hemisphere MB"
dd.left$side <- "left hemisphere MB"
dd.all <- rbind(dd.right,dd.left)
type <- names(table(dd.all$type))[-1]
means <- t(sapply(type, function(x) colMeans(dd.all[dd.all$type2==x,1:2])))
means <- data.frame(x=means[,1],y=means[,2],col=factor(type))
layout <- data.frame(id=1:nrow(dd4), x=dd4$x, y=dd4$y, r=1.96*dd4$sdx)
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p5 <- ggplot(dd.all,aes(x=x,y=y)) +
#p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(color=type,fill=type),size=2,alpha=0.5) +
facet_wrap(~side) +
stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2), alpha=.2, show.legend=FALSE) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_point(data=means, aes(x=x,y=y,color=col),size=5,show.legend=FALSE) +
#    geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred") +
xlab("out 1") + ylab("out 2")
print(p5)
procrustes
proc = procrustes(Xhat.left, Xhat)
str(Xhat.left)
str(Xhat)
source(url("http://www.cis.jhu.edu/~parky/HSBM/ccc_utils.r"))
tmp = kernel.stat(Xhat.left, Xhat)
str(tmp)
tmp = kernel.stat(Xhat.left[,1:2], Xhat[,1:2])
tmp
kernel.stat(Xhat.left[,1:2] %*% diag(c(-1,1)), Xhat[,1:2])
kernel.stat(Xhat.left[,1:2] %*% diag(c(-1,-1)), Xhat[,1:2])
stat <- 1e10
for (i in 1:2) {
for (j in 1:2) {
stat <- min(stat, kernel.stat(Xhat.left[,1:2] %*% diag(c(-1^i,-1^j)), Xhat[,1:2]))
}
stat
stat <- rep(0,4)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[ind] <- kernel.stat(Xhat.left[,1:2] %*% diag(c(-1^i,-1^j)), Xhat[,1:2])
ind <- ind + 1
}
stat
stat <- rep(0,4)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[ind] <- kernel.stat(Xhat.left[,1:2] %*% diag(c((-1)^i,(-1)^j)), Xhat[,1:2])
ind <- ind + 1
}
stat <- matrix(0,2,2)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[i,j] <- kernel.stat(Xhat.left[,1:2] %*% diag(c((-1)^i,(-1)^j)), Xhat[,1:2])
}
stat
?which.min
min.stat <- which(stat==min(stat), arr.ind=TRUE)
Xhat.left <- Xhat.left %*% diag(c((-1)^min.stat[1], (-1)^min.stat[2]))
Xhat.left <- Xhat.left[,1:2] %*% diag(c((-1)^min.stat[1], (-1)^min.stat[2]))
out.left <- generate.graph(newldat, vdf.left)
g.left <- out.left$g
vdf.left <- out.left$vdf
Xhat.left <- doEmbed(g.left, dmax)
mc.left <- Mclust(Xhat.left, 2:10)
mytab.left <- table(vdf.left$type,mc.left$class)
type2.left <- factor(rownames(mytab.left)[apply(mytab.left,2,which.max)])
type2.left <- type2.left[mc.left$class]
## find the best sign combinations == minimizing nonpar stat
stat <- matrix(0,2,2)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[i,j] <- kernel.stat(Xhat.left[,1:2] %*% diag(c((-1)^i,(-1)^j)), Xhat[,1:2])
}
min.stat <- which(stat==min(stat), arr.ind=TRUE)
Xhat.left <- Xhat.left[,1:2] %*% diag(c((-1)^min.stat[1], (-1)^min.stat[2]))
dd.left <- data.frame(x=Xhat.left[,1],y=Xhat.left[,2],type=vdf.left$type, type2=type2.left)
p4 <- p3 + geom_point(data=dd.left, aes(x=x,y=y,color=type),alpha=0.7)
#p4
## right & left
#    dd3 <- dd3[,-7]
dd.right <- dd[,c("x","y","type","type2")]
dd.right$side <- "right hemisphere MB"
dd.left$side <- "left hemisphere MB"
dd.all <- rbind(dd.right,dd.left)
type <- names(table(dd.all$type))[-1]
means <- t(sapply(type, function(x) colMeans(dd.all[dd.all$type2==x,1:2])))
means <- data.frame(x=means[,1],y=means[,2],col=factor(type))
layout <- data.frame(id=1:nrow(dd4), x=dd4$x, y=dd4$y, r=1.96*dd4$sdx)
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p5 <- ggplot(dd.all,aes(x=x,y=y)) +
#p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(color=type,fill=type),size=2,alpha=0.5) +
facet_wrap(~side) +
stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2), alpha=.2, show.legend=FALSE) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_point(data=means, aes(x=x,y=y,color=col),size=5,show.legend=FALSE) +
#    geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred") +
xlab("out 1") + ylab("out 2")
print(p5)
out.left <- generate.graph(newldat, vdf.left)
g.left <- out.left$g
vdf.left <- out.left$vdf
Xhat.left <- doEmbed(g.left, dmax)
mc.left <- Mclust(Xhat.left, 2:10)
mytab.left <- table(vdf.left$type,mc.left$class)
type2.left <- factor(rownames(mytab.left)[apply(mytab.left,2,which.max)])
type2.left <- type2.left[mc.left$class]
## find the best sign combinations == minimizing nonpar stat
stat <- matrix(0,2,2)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[i,j] <- kernel.stat(Xhat.left[,1:2] %*% diag(c((-1)^i,(-1)^j)), Xhat[,1:2])
}
library(mbstructure)
data(MBconnectome)
out.left <- generate.graph(newldat, vdf.left)
g.left <- out.left$g
vdf.left <- out.left$vdf
Xhat.left <- doEmbed(g.left, dmax)
mc.left <- Mclust(Xhat.left, 2:10)
mytab.left <- table(vdf.left$type,mc.left$class)
type2.left <- factor(rownames(mytab.left)[apply(mytab.left,2,which.max)])
type2.left <- type2.left[mc.left$class]
str(Xhat.left)
out.left <- generate.graph(newldat, vdf.left)
library(mbstructure)
?fread
require(mbstructure)
demo(sec2)
demo(sec3)
demo("disc-3")
library(mbstructure)
devtools::use_vignette("mbstructure")
