Bobs <- matrix(Bobsvec,ncol=Khat,byrow=T)
round(Bobs,2)
Bobs <- matrix(Bobsvec,ncol=Khat,byrow=F)
round(Bobs,2)
svdBobs <- svd(Bobs) # true latent positions for SBM on Bobs
Bobsout <- svdBobs$u %*% diag(svdBobs$d^(1/2))
Bobsin  <- diag(svdBobs$d^(1/2)) %*% t(svdBobs$v)
library(mbstructure)
Khat <- max(as.numeric(vdf$cluster))
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=Khat, dtype="synth", doplot=FALSE)
aseBobs6 <- sout6$aseBobsnew[KC,] # procrusted
plot(-ase6[,1],ase6[,2])
points(aseBobs6[,1],-aseBobs6[,2],col=2)
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
sout6 <- synthMB(g, Xhat, vdf, labK=vdf$cluster, Khat=Khat, dtype="synth", doplot=FALSE)
plot(-ase6[,1],ase6[,2])
points(-aseBobs6[,1],-aseBobs6[,2],col=2)
library(mbstructure)
kable(table(type=vdf$type,Khat6=vdf$cluster),caption="Graph embedding inference mclust ◦ ase for the Drosophila connectome yields six clusters, clearly coherent with but not perfectly aligned with the four true neuron types, as presented in this confusion matrix.")
require(knitr)
kable(table(type=vdf$type,Khat6=vdf$cluster),caption="Graph embedding inference mclust ◦ ase for the Drosophila connectome yields six clusters, clearly coherent with but not perfectly aligned with the four true neuron types, as presented in this confusion matrix.")
library(mbstructure)
library(printr)
?printr
library(mbstructure)
data(MBstructure)
data(MBconnectome)
data(claw)
str(claw)
str(newrdat)
str(claw)
str(vdf.right)
sessionInfo()
library(mbstructure)
data(MBconnectome)
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow=FALSE)
suppressMessages(library(mclust))
Kmax <- 19
mc <- Mclust(Xhat, 1:Kmax)
vdf$cluster <- factor(mc$class)
sout <- synthMB(g, vdf)
synthMB
library(mbstructure)
data(MBconnectome)
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow=FALSE)
suppressMessages(library(mclust))
Kmax <- 19
mc <- Mclust(Xhat, 1:Kmax)
vdf$cluster <- factor(mc$class)
str(Xhat)
str(vdf)
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
Khat <- max(as.numeric(dd$cluster))
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
K <- 100
Xhat4 <- Xhat[vdf$type=="KC",]
n <- nrow(Xhat4)
p <- ncol(Xhat4)
out100 <- semiparYQ(Xhat4, K=K, verbose=FALSE)
means <- out100$means
vars <- t(sapply(1:dim(out100$vars)[3],function(x) sqrt(diag(out100$vars[,,x]))))
K <- nrow(means)
Xhat5 <- rbind(Xhat4,means)
colnames(Xhat5) <- c(paste("out",1:3),paste("in",1:3))
ggY <- makePairs(as.data.frame(Xhat5))
ndf <- nrow(ggY$all)
mydf.yq <- data.frame(ggY$all, type=rep(c(rep("KC",nrow(Xhat4)),rep("MLE",nrow(means))),length=ndf))
alpha <- 0.7
tmpcol <- gg_color_hue(2,alpha=alpha)
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
Khat <- max(as.numeric(dd$cluster))
dd3 <- subset(dd, type2!="KC")    # ellipse
dd4 <- data.frame(x=means[,1],y=means[,2],sdx=vars[,1],sdy=vars[,2])
tmpcol <- gg_color_hue(2)
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
suppressMessages(library(mvtnorm))
suppressMessages(library(ggplot2))
suppressMessages(library(RColorBrewer))
suppressMessages(library(packcircles))
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) + coord_equal() +
xlab("out 1") + ylab("out 2")
print(p3)
type <- names(table(dd$type))[-1]
means2 <- t(sapply(type, function(x) colMeans(dd[dd$type2==x,1:2])))
means2 <- data.frame(x=means2[,1],y=means2[,2],col=factor(type))
layout <- data.frame(id=1:nrow(means), x=means[,1], y=means[,2], r=1.96*vars[,1])
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(shape=cluster,color=type,fill=type),size=3,alpha=0.9) +
scale_shape_manual(values=as.character(1:Khat)) #+
p3 <- p3 + stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2),alpha=.2,show.legend=F) +
geom_line(data=dd4,color="darkred",size=1.5) + coord_equal() +
geom_point(data=means2, aes(x=x,y=y,color=col),size=5,show.legend=FALSE) +
xlab("out 1") + ylab("out 2")
print(p3)
library(mbstructure)
data(MBconnectome)
suppressMessages(library(mclust))
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow = FALSE)
Kmax <- 19
mc <- Mclust(Xhat, 2:Kmax)
vdf$cluster <- factor(mc$class)
Xhat4 <- Xhat[vdf$type=="KC",]
out100 <- semiparYQ(Xhat4, K=100, verbose=FALSE)
suppressMessages(library(ggplot2))
suppressMessages(library(mclust))
suppressMessages(library(RColorBrewer))
suppressMessages(library(packcircles))
suppressMessages(library(mvtnorm))
dd <- data.frame(x=Xhat[,1], y=Xhat[,2], vdf)
#    dd <- dd[,c("x","y","cluster","type","age")]
mytab <- with(dd,table(type,cluster))
type2 <- factor(rownames(mytab)[apply(mytab,2,which.max)])
dd$type2 <- type2[vdf$cluster]
Khat <- max(as.numeric(dd$cluster))
dd3 <- subset(dd, type2!="KC")    # ellipse
vars <- t(sapply(1:dim(out100$vars)[3],function(x) sqrt(diag(out100$vars[,,x]))))
dd4 <- data.frame(x=out100$means[,1],y=out100$means[,2],sdx=vars[,1],sdy=vars[,2])
## model: right
p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_point(aes(color=type,shape=type,fill=type),size=0,alpha=0.9) +
scale_shape_manual(values=rep("R",4),guide=FALSE) +
stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2), alpha=.2, show.legend=FALSE) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred") +
xlab("out 1") + ylab("out 2")
## point: left
out.left <- generate.graph(newldat, vdf.left)
g.left <- out.left$g
vdf.left <- out.left$vdf
Xhat.left <- doEmbed(g.left, dmax)
mc.left <- Mclust(Xhat.left, 2:10)
mytab.left <- table(vdf.left$type,mc.left$class)
type2.left <- factor(rownames(mytab.left)[apply(mytab.left,2,which.max)])
type2.left <- type2.left[mc.left$class]
dd.left <- data.frame(x=-Xhat.left[,1],y=Xhat.left[,2],type=vdf.left$type, type2=type2.left)
p4 <- p3 + geom_point(data=dd.left, aes(x=x,y=y,color=type),alpha=0.7)
dd.right <- dd[,c("x","y","type","type2")]
dd.right$side <- "right hemisphere MB"
dd.left$side <- "left hemisphere MB"
dd.all <- rbind(dd.right,dd.left)
type <- names(table(dd.all$type))[-1]
means <- t(sapply(type, function(x) colMeans(dd.all[dd.all$type2==x,1:2])))
means <- data.frame(x=means[,1],y=means[,2],col=factor(type))
layout <- data.frame(id=1:nrow(dd4), x=dd4$x, y=dd4$y, r=1.96*dd4$sdx)
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p5 <- ggplot(dd.all,aes(x=x,y=y)) +
#p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(color=type,fill=type),size=2,alpha=0.5) +
facet_wrap(~side) +
stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2), alpha=.2, show.legend=FALSE) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_point(data=means, aes(x=x,y=y,color=col),size=5,show.legend=FALSE) +
#    geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred") +
xlab("out 1") + ylab("out 2")
print(p5)
procrustes
proc = procrustes(Xhat.left, Xhat)
str(Xhat.left)
str(Xhat)
source(url("http://www.cis.jhu.edu/~parky/HSBM/ccc_utils.r"))
tmp = kernel.stat(Xhat.left, Xhat)
str(tmp)
tmp = kernel.stat(Xhat.left[,1:2], Xhat[,1:2])
tmp
kernel.stat(Xhat.left[,1:2] %*% diag(c(-1,1)), Xhat[,1:2])
kernel.stat(Xhat.left[,1:2] %*% diag(c(-1,-1)), Xhat[,1:2])
stat <- 1e10
for (i in 1:2) {
for (j in 1:2) {
stat <- min(stat, kernel.stat(Xhat.left[,1:2] %*% diag(c(-1^i,-1^j)), Xhat[,1:2]))
}
stat
stat <- rep(0,4)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[ind] <- kernel.stat(Xhat.left[,1:2] %*% diag(c(-1^i,-1^j)), Xhat[,1:2])
ind <- ind + 1
}
stat
stat <- rep(0,4)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[ind] <- kernel.stat(Xhat.left[,1:2] %*% diag(c((-1)^i,(-1)^j)), Xhat[,1:2])
ind <- ind + 1
}
stat <- matrix(0,2,2)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[i,j] <- kernel.stat(Xhat.left[,1:2] %*% diag(c((-1)^i,(-1)^j)), Xhat[,1:2])
}
stat
?which.min
min.stat <- which(stat==min(stat), arr.ind=TRUE)
Xhat.left <- Xhat.left %*% diag(c((-1)^min.stat[1], (-1)^min.stat[2]))
Xhat.left <- Xhat.left[,1:2] %*% diag(c((-1)^min.stat[1], (-1)^min.stat[2]))
out.left <- generate.graph(newldat, vdf.left)
g.left <- out.left$g
vdf.left <- out.left$vdf
Xhat.left <- doEmbed(g.left, dmax)
mc.left <- Mclust(Xhat.left, 2:10)
mytab.left <- table(vdf.left$type,mc.left$class)
type2.left <- factor(rownames(mytab.left)[apply(mytab.left,2,which.max)])
type2.left <- type2.left[mc.left$class]
## find the best sign combinations == minimizing nonpar stat
stat <- matrix(0,2,2)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[i,j] <- kernel.stat(Xhat.left[,1:2] %*% diag(c((-1)^i,(-1)^j)), Xhat[,1:2])
}
min.stat <- which(stat==min(stat), arr.ind=TRUE)
Xhat.left <- Xhat.left[,1:2] %*% diag(c((-1)^min.stat[1], (-1)^min.stat[2]))
dd.left <- data.frame(x=Xhat.left[,1],y=Xhat.left[,2],type=vdf.left$type, type2=type2.left)
p4 <- p3 + geom_point(data=dd.left, aes(x=x,y=y,color=type),alpha=0.7)
#p4
## right & left
#    dd3 <- dd3[,-7]
dd.right <- dd[,c("x","y","type","type2")]
dd.right$side <- "right hemisphere MB"
dd.left$side <- "left hemisphere MB"
dd.all <- rbind(dd.right,dd.left)
type <- names(table(dd.all$type))[-1]
means <- t(sapply(type, function(x) colMeans(dd.all[dd.all$type2==x,1:2])))
means <- data.frame(x=means[,1],y=means[,2],col=factor(type))
layout <- data.frame(id=1:nrow(dd4), x=dd4$x, y=dd4$y, r=1.96*dd4$sdx)
cir <- circlePlotData(layout, id.col=1, xyr.cols=2:4)
p5 <- ggplot(dd.all,aes(x=x,y=y)) +
#p3 <- ggplot(dd,aes(x=x,y=y)) +
geom_polygon(data=cir, aes(x, y, group=id), fill="rosybrown1", colour="rosybrown1", alpha=1) +
geom_point(aes(color=type,fill=type),size=2,alpha=0.5) +
facet_wrap(~side) +
stat_ellipse(data=dd3,geom="polygon",aes(fill=type2,color=type2), alpha=.2, show.legend=FALSE) +
geom_line(data=dd4,color="darkred",size=1.5) +
geom_point(data=means, aes(x=x,y=y,color=col),size=5,show.legend=FALSE) +
#    geom_ribbon(data=dd4,aes(ymin=y-1.96*sdx,ymax=y+1.96*sdy),alpha=0.2,fill="darkred") +
xlab("out 1") + ylab("out 2")
print(p5)
out.left <- generate.graph(newldat, vdf.left)
g.left <- out.left$g
vdf.left <- out.left$vdf
Xhat.left <- doEmbed(g.left, dmax)
mc.left <- Mclust(Xhat.left, 2:10)
mytab.left <- table(vdf.left$type,mc.left$class)
type2.left <- factor(rownames(mytab.left)[apply(mytab.left,2,which.max)])
type2.left <- type2.left[mc.left$class]
## find the best sign combinations == minimizing nonpar stat
stat <- matrix(0,2,2)
ind <- 1
for (i in 1:2) {
for (j in 1:2) {
stat[i,j] <- kernel.stat(Xhat.left[,1:2] %*% diag(c((-1)^i,(-1)^j)), Xhat[,1:2])
}
library(mbstructure)
data(MBconnectome)
out.left <- generate.graph(newldat, vdf.left)
g.left <- out.left$g
vdf.left <- out.left$vdf
Xhat.left <- doEmbed(g.left, dmax)
mc.left <- Mclust(Xhat.left, 2:10)
mytab.left <- table(vdf.left$type,mc.left$class)
type2.left <- factor(rownames(mytab.left)[apply(mytab.left,2,which.max)])
type2.left <- type2.left[mc.left$class]
str(Xhat.left)
out.left <- generate.graph(newldat, vdf.left)
library(mbstructure)
?fread
require(mbstructure)
demo(sec2)
demo(sec3)
demo("disc-3")
library(mbstructure)
devtools::use_vignette("mbstructure")
library(mbstructure)
devtools::use_vignette("mbstructure")
library(mbstructure)
devtools::use_vignette("mbstructure")
devtools::build_vignette("mbstructure")
devtools::build_vignettes()
library(mbstructure)
setwd("~/Dropbox/Worm/Codes/Connectome/mbstructure")
library(mbstructure)
require(testthat)
require(mbstructure)
test_check("mbstructure")
library(knitr)
knitr::opts_chunk$set(echo=TRUE, eval=FALSE,warning=FALSE)
opts_knit$set(aliases=c(h='fig.height', w='fig.width', cap='fig.cap', scap='fig.scap'))
opts_knit$set(eval.after = c('fig.cap','fig.scap'))
knit_hooks$set(document = function(x) {
gsub('(\\\\end\\{knitrout\\}[\n]+)', '\\1\\\\noindent ', x)
})
fn = local({
i = 0
function(x) {
i <<- i + 1
#     paste('Figure ', i, ': ', x, sep = '')
paste('', '', x, sep = '')
}
})
suppressMessages(library(ggplot2))
suppressMessages(library(igraph))
suppressMessages(library(Matrix))
suppressMessages(library(lattice))
suppressMessages(library(mclust))
suppressMessages(library(RColorBrewer))
suppressMessages(library(packcircles))
suppressMessages(library(mvtnorm))
suppressMessages(library(printr))
suppressMessages(library(xtable))
library(help='mbstructure')
sessionInfo()
library(mbstructure)
data(MBstructure)
data(MBconnectome)
str(newrdat)
ls()
library(mbstructure)
require(mbstructure)
data("MBconnectome")
str(newrdat)
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
dmax <- 50
Xhat <- doEmbed(g, dmax)
suppressMessages(library(igraph))
ase <- embed_adjacency_matrix(g,dmax)
(elb.dir.u <- getElbows(ase$D,plot=FALSE))
str(ase)
(elb.dir.u <- getElbows(ase$D,plot=FALSE))
Xhat1 <- as.matrix(ase$X[,1:20]) # "in"
Xhat2 <- as.matrix(ase$Y[,1:20]) # "out"
Xhat3 <- cbind(Xhat1,Xhat2)
dim(Xhat3)
summary(g)
g[][1:5,1:5]
str(out)
gw
wg = out$g.w
summary(wg)
wg[][1:5, 1:5]
is.weighted(wg)
Aw = as.matrix(wg[])
Aq[1:5,1:5]
Aw[1:5,1:5]
str(vdf.right)
head(vdf)
save(Aw, Xhat3, vdf,. file="~/Dropbox/Worm/Codes/Connectome/data-cy.Rbin")
save(Aw, Xhat3, vdf, file="~/Dropbox/Worm/Codes/Connectome/data-cy.Rbin")
require(mbstructure)
data(MBconnectome)
head(vdf.right)
out <- generate.graph(newrdat, vdf.right)
g <- out$g
vdf <- out$vdf
head(vdf)
dmax <- 50
Xhat <- doEmbed(g, dmax, plotElbow=FALSE)
suppressMessages(library(mclust))
Kmax <- 19
mc <- Mclust(Xhat, 1:Kmax)
vdf$cluster <- factor(mc$class)
sout <- synthMB(g, vdf)
semiout <- plotMLE(Xhat, vdf)
str(g)
summary9g
summary(g)
data(claw)
str(claw)
str(vdf)
getwd()
library(mbstructure)
data(MBconnectome)
wg = generate.graph(newrdat, vdf.right, weighted=TRUE)
summary(wg$g)
image(wg$g[])
require(Matrix)
image(wg$g[], useAbs=FALSE)
require(igraph)
require(Matrix)
require(mbstructure)
data(MBconnectome)
wg.R<- generate.graph(newrdat, vdf.right, weighted=TRUE); summary(wg.R$g); image(wg.R$g[], useAbs=FALSE)
wg.L<- generate.graph(newldat, vdf.left, weighted=TRUE); summary(wg.L$g); image(wg.L$g[], useAbs=FALSE)
print(load(url("http://www.cis.jhu.edu/~parky/weightedMB.Rbin")))
summary(wg.R)
library(igraph)
print(load(url("http://www.cis.jhu.edu/~parky/weightedMB.Rbin")))
summary(wg.R)
summary(wg.R$g)
summary(wg.L$g)
require(gmmase)
ptr
is.connected(wg.R$g)
is.connected(wg.L$g)
g.R <- wg.R$g
W.R <- E(g.R$g)$weight
dmax <- 20
ase.R <- embed_adjacency_matrix(g.R, dmax)
ase.L <- embed_adjacency_matrix(g.L, dmax)
plot(ase.R$D, type="b", main="scree, Right")
plot(ase.L$D, type="b", main="scree, Left")
g.L <- wg.L$g
W.L <- E(g.L)$weight
E(g.L)$weight <- rank(W.L)*2 / (ecount(g.L)+1)
summary(E(g.L)$weight)
is.connected(g.R)
is.connected(g.L)
dmax <- 20
ase.R <- embed_adjacency_matrix(g.R, dmax)
ase.L <- embed_adjacency_matrix(g.L, dmax)
plot(ase.R$D, type="b", main="scree, Right")
plot(ase.L$D, type="b", main="scree, Left")
getElbows(ase.R$D)
getElbows(ase.L$D)
is.directed(g.R)
is.directed(g.L)
dhat <- 4
Xhat.R <- cbind(ase.R$X[,1:dhat], ase.R$Y[,1:dhat])
Xhat.L <- cbind(ase.L$X[,1:dhat], ase.L$Y[,1:dhat])
Kmax <- 10
library(mclust)
Kmax <- 10
mc.R <- Mclust(Xhat.R, Kmax)
mc.L <- Mclust(Xhat.L, Kmax)
plot(mc.R, "class")
plot(mc.R, "BIC")
mc.R <- Mclust(Xhat.R, 2:Kmax)
mc.L <- Mclust(Xhat.L, 2:Kmax)
plot(mc.R, "BIC")
plot(mc.L, "BIC")
head(wg.R$vdf)
adjustedRandIndex(wg.R$vdf$type, mc.R$class)
table(wg.R$vdf$type, mc.R$class)
table(wg.L$vdf$type, mc.L$class)
adjustedRandIndex(wg.L$vdf$type, mc.L$class)
getwd()
require(rmarkdown)
render("vignettes/MBweighted.Rmd")
summary(wg.R$g); image(wg.R$g[], main="Right")
summary(wg.L$g); image(wg.L$g[], main="Left")
## Alter graphs
A.R <- wg.R$g[]
A.L <- wg.L$g[]
sum(diag(A.R))
sum(diag(A.R)); diag(A.R) <- 0
sum(diag(A.L)); diag(A.L) <- 0
g.R <- graph.adjacency(A.R); summary(g.R)
g.R <- graph.adjacency(A.R, weighted=TRUE); summary(g.R)
head(wg.R$vdf)
head(wg.L$vdf)
## Alter graphs
A.R <- wg.R$g[]
A.L <- wg.L$g[]
sum(diag(A.R)); diag(A.R) <- 0
sum(diag(A.L)); diag(A.L) <- 0
g.R <- graph.adjacency(A.R, weighted=TRUE); summary(g.R)
g.L <- graph.adjacency(A.L, weighted=TRUE); summary(g.L)
render("vignettes/MBweighted.Rmd")
(elbow.R <- getElbows(ase.R$D, main="scree, Right"))
(elbow.L <- getElbows(ase.L$D, main="scree, Left"))
render("vignettes/MBweighted.Rmd")
?save
require(mbstructure)
?MBstructure
?mbstructure
?data
?MBconnectome
data(MBconnectome)
library(mbstructure)
data(MBconnectome)
ls()
sum(is.na(unlist(newldat)))
